{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hiral\\\\Documents\\\\recipe\\\\frontend\\\\src\\\\component\\\\test.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './test.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Test = () => {\n  _s();\n  let nextId = 0;\n  const [formValues, setFormValues] = useState('');\n  const [artists, setArtists] = useState([]);\n  let handleChange = (i, e) => {\n    // let newFormValues = [...formValues];\n    // newFormValues[i][e.target.name] = e.target.value;\n    // setFormValues(newFormValues);\n    setFormValues(e.target.value);\n  };\n  console.log(\"Form\", formValues);\n  let addFormFields = () => {\n    setArtists([...artists, {\n      id: nextId++,\n      ingredient: formValues\n    }]);\n  };\n  let removeFormFields = i => {\n    let newFormValues = [...formValues];\n    newFormValues.splice(i, 1);\n    setFormValues(newFormValues);\n  };\n  let handleSubmit = event => {\n    event.preventDefault();\n    alert(JSON.stringify(formValues));\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [formValues.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"ingredient\",\n        value: element.ingredient || \"\",\n        onChange: e => handleChange(index, e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this), index ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"button remove\",\n        onClick: () => removeFormFields(index),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }, this) : null]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button add\",\n        type: \"button\",\n        onClick: () => addFormFields(),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button submit\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(Test, \"knzNm/GAHB+J6OeSFuledKJbFnU=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Test","_s","nextId","formValues","setFormValues","artists","setArtists","handleChange","i","e","target","value","console","log","addFormFields","id","ingredient","removeFormFields","newFormValues","splice","handleSubmit","event","preventDefault","alert","JSON","stringify","onSubmit","children","map","element","index","className","fileName","_jsxFileName","lineNumber","columnNumber","type","name","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hiral/Documents/recipe/frontend/src/component/test.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport './test.css'\r\n\r\nconst Test = () => {\r\n  let nextId = 0;\r\n\r\n    const [formValues, setFormValues] = useState('')\r\n    const [artists, setArtists] = useState([]);\r\n    let handleChange = (i, e) => {\r\n      // let newFormValues = [...formValues];\r\n      // newFormValues[i][e.target.name] = e.target.value;\r\n      // setFormValues(newFormValues);\r\n       setFormValues(e.target.value)\r\n      }\r\n    console.log(\"Form\",formValues)\r\n    let addFormFields = () => {\r\n      setArtists([\r\n        ...artists,\r\n        { id: nextId++, ingredient: formValues }\r\n      ]);\r\n    \r\n      }\r\n    \r\n    let removeFormFields = (i) => {\r\n        let newFormValues = [...formValues];\r\n        newFormValues.splice(i, 1);\r\n        setFormValues(newFormValues)\r\n    }\r\n    \r\n    let handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        alert(JSON.stringify(formValues));\r\n    }\r\n\r\n    return (\r\n        <form  onSubmit={handleSubmit}>\r\n          {formValues.map((element, index) => (\r\n            <div className=\"form-inline\" key={index}>\r\n            \r\n           \r\n              <label>{index}</label>\r\n              <input type=\"text\" name=\"ingredient\" value={element.ingredient || \"\"} onChange={e => handleChange(index, e)} />\r\n              {\r\n                index ? \r\n                  <button type=\"button\"  className=\"button remove\" onClick={() => removeFormFields(index)}>Remove</button> \r\n                : null\r\n              }\r\n            </div>\r\n          ))}\r\n          <div className=\"button-section\">\r\n              <button className=\"button add\" type=\"button\" onClick={() => addFormFields()}>Add</button>\r\n              <button className=\"button submit\" type=\"submit\">Submit</button>\r\n          </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default Test\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}