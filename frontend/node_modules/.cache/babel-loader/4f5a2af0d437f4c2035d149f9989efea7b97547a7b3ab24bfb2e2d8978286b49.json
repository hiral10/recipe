{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hiral\\\\Documents\\\\recipe\\\\frontend\\\\src\\\\component\\\\test.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './test.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet nextId = 0;\nconst Test = () => {\n  _s();\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n  const [value, setValue] = useState([]);\n  console.log(artists, value);\n  let array = [];\n  const add = () => {\n    setArtists([...artists, {\n      id: nextId++,\n      name: name\n    }]);\n    console.log(artists, array);\n    return artists;\n  };\n  const remove = index => {\n    setValue(value.splice(index, 1));\n    console.log(\"VAL\", value);\n    return value;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Inspiring sculptors:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: value.map((val, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [val, \"  \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => remove(index),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 36\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Test, \"ZkntSrJ+Jh/klrk3zaZjE1AUc0U=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","nextId","Test","_s","name","setName","artists","setArtists","value","setValue","console","log","array","add","id","remove","index","splice","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","onClick","map","val","_c","$RefreshReg$"],"sources":["C:/Users/Hiral/Documents/recipe/frontend/src/component/test.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport './test.css'\r\nlet nextId = 0;\r\nconst Test = () => {\r\n\r\n  const [name, setName] = useState('');\r\n  const [artists, setArtists] = useState([]);\r\n  const [value,setValue] = useState([])\r\nconsole.log(artists,value)\r\nlet array=[];\r\nconst add=()=>{\r\n  setArtists([\r\n    ...artists,\r\n    { id: nextId++, name:name }\r\n  ]);\r\n  console.log(artists,array)\r\n  return artists\r\n}\r\nconst remove=(index)=>{\r\n  setValue(value.splice(index,1))\r\n  console.log(\"VAL\",value)\r\n  return value\r\n}\r\n  return (\r\n    <>\r\n      <h1>Inspiring sculptors:</h1>\r\n      <input\r\n        value={name}\r\n        onChange={e => setName(e.target.value)}\r\n      />\r\n      <button onClick={add}>Add</button>\r\n      <ul>\r\n        {value.map((val,index) => (\r\n          <div key={index}>          \r\n            <li key={index}>{val}  <button onClick={()=>remove(index)}>Remove</button></li>\r\n         \r\n           </div>\r\n        ))}\r\n       \r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Test\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACnB,IAAIC,MAAM,GAAG,CAAC;AACd,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,KAAK,EAACC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACvCc,OAAO,CAACC,GAAG,CAACL,OAAO,EAACE,KAAK,CAAC;EAC1B,IAAII,KAAK,GAAC,EAAE;EACZ,MAAMC,GAAG,GAACA,CAAA,KAAI;IACZN,UAAU,CAAC,CACT,GAAGD,OAAO,EACV;MAAEQ,EAAE,EAAEb,MAAM,EAAE;MAAEG,IAAI,EAACA;IAAK,CAAC,CAC5B,CAAC;IACFM,OAAO,CAACC,GAAG,CAACL,OAAO,EAACM,KAAK,CAAC;IAC1B,OAAON,OAAO;EAChB,CAAC;EACD,MAAMS,MAAM,GAAEC,KAAK,IAAG;IACpBP,QAAQ,CAACD,KAAK,CAACS,MAAM,CAACD,KAAK,EAAC,CAAC,CAAC,CAAC;IAC/BN,OAAO,CAACC,GAAG,CAAC,KAAK,EAACH,KAAK,CAAC;IACxB,OAAOA,KAAK;EACd,CAAC;EACC,oBACEV,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BxB,OAAA;MACEU,KAAK,EAAEJ,IAAK;MACZmB,QAAQ,EAAEC,CAAC,IAAInB,OAAO,CAACmB,CAAC,CAACC,MAAM,CAACjB,KAAK;IAAE;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACFxB,OAAA;MAAQ4B,OAAO,EAAEb,GAAI;MAAAK,QAAA,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAClCxB,OAAA;MAAAoB,QAAA,EACGV,KAAK,CAACmB,GAAG,CAAC,CAACC,GAAG,EAACZ,KAAK,kBACnBlB,OAAA;QAAAoB,QAAA,eACEpB,OAAA;UAAAoB,QAAA,GAAiBU,GAAG,EAAC,IAAE,eAAA9B,OAAA;YAAQ4B,OAAO,EAAEA,CAAA,KAAIX,MAAM,CAACC,KAAK,CAAE;YAAAE,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAAjEN,KAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgE;MAAC,GADvEN,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGT,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEA,CAAC;EAAA,eACL,CAAC;AAEP,CAAC;AAAAnB,EAAA,CAvCKD,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AAyCV,eAAeA,IAAI;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}